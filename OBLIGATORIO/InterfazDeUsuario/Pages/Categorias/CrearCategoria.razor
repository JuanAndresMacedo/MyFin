@page "/Categorias/CrearCategoria/"
@using Dominio
@using Dominio.Constantes
@using Logica
@inject CategoriaLogica CategoriaLogica
@inject UsuarioLogica UsuarioLogica
@inject EspacioLogica EspacioLogica
@inject NavigationManager NavigationManager

<PageTitle>Crear Categoria</PageTitle>

<div class="mb-3 mensaje-error-contenedor">
    @if (!string.IsNullOrWhiteSpace(_mensajeDeError))
    {
        <div class="alert alert-danger mensaje-error" role="alert">
            @_mensajeDeError
        </div>
    }
</div>

<div class="container center-div">
    <div class="col-md-6">
        <h1>Crear categor√≠a <i class="bi bi-tags"></i> </h1>

        <form>
            <div class="mb-3">
                <label for="nombre" class="form-label">Nombre</label>
                <input type="text" class="form-control" id="nombre" required @bind="_nombre">
            </div>

            <div class="mb-3">
                <fieldset>
                    <legend for="estatusRadioButton" class="form-label fs-6">Estatus</legend>

                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="estatus" id="Activa" value="Activa" checked
                               @onchange="ActualizarEstatusSeleccionado"/>
                        <label class="form-check-label" for="Activa"> Activa </label>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="estatus" id="Inactiva" value="Inactiva"
                               @onchange="ActualizarEstatusSeleccionado"/>
                        <label class="form-check-label" for="Inactiva"> Inactiva </label>
                    </div>
                </fieldset>
            </div>

            <div class="mb-3">
                <fieldset>
                    <legend for="tipoRadioButton" class="form-label fs-6">Tipo</legend>

                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="tipo" id="Costo" value="Costo" checked
                               @onchange="ActualizarTipoSeleccionado"/>
                        <label class="form-check-label" for="Costo"> Costo </label>
                    </div>
                    
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="tipo" id="Ingreso" value="Ingreso"
                               @onchange="ActualizarTipoSeleccionado"/>
                        <label class="form-check-label" for="Ingreso"> Ingreso </label>
                    </div>
                    
                </fieldset>
            </div>

            <div class="d-flex justify-content-between align-items-center">
                <button type="button" class="btn btn-secondary" @onclick="CancelarCrearCategoria"> Cancelar </button>
                <button type="button" class="btn btn-primary"
                        @onclick="CrearCategoriaNueva">
                    Crear <i class="bi bi-plus-circle"></i>
                </button>
            </div>
        </form>
    </div>
</div>

@code {
    private Usuario _usuarioActual;
    private Espacio _espacioActual;
    private string _nombre;
    private string _estatus;
    private string _tipo;
    private DateTime _fechaDeCreacion;

    private string _mensajeDeError;

    protected override void OnInitialized()
    {
        _usuarioActual = UsuarioLogica.EncontrarUsuario(UsuarioLogica.UsuarioActual().Id);
        _espacioActual = EspacioLogica.EncontrarEspacio(EspacioLogica.EspacioActual().Id);
        _estatus = ConstantesCategoria.estatusActiva;
        _tipo = ConstantesCategoria.tipoCosto;
        _fechaDeCreacion = DateTime.Today;
    }

    private void CancelarCrearCategoria()
    {
        NavigationManager.NavigateTo("/Categorias");
    }

    private void ActualizarEstatusSeleccionado(ChangeEventArgs e)
    {
        _estatus = e.Value.ToString();
    }

    private void ActualizarTipoSeleccionado(ChangeEventArgs e)
    {
        _tipo = e.Value.ToString();
    }

    private void CrearCategoriaNueva()
    {
        try
        {
            Categoria _categoriaACrear = new Categoria()
            {
                Nombre = _nombre,
                Estatus = _estatus,
                Tipo = _tipo,
                FechaDeCreacion = _fechaDeCreacion,
                UsuarioCreador = _usuarioActual,
                Espacio = _espacioActual,
            };

            CategoriaLogica.AgregarCategoria(_categoriaACrear);
            NavigationManager.NavigateTo("/Categorias");
        }
        catch (LogicaExcepcion le)
        {
            _mensajeDeError = le.Message;
        }
        catch (DominioExcepcion de)
        {
            _mensajeDeError = de.Message;
        }
    }

}